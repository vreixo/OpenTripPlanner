<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <artifactId>otp-core</artifactId>
    <packaging>jar</packaging>
    <name>OpenTripPlanner Core</name>

    <parent>
      <groupId>org.opentripplanner</groupId>
      <artifactId>opentripplanner</artifactId>
      <version>0.11.1-SNAPSHOT</version>
    </parent>

    <dependencies>
    
      <!-- OTP MODULES -->
      
      <dependency>
        <!-- We include the client WAR artifact in the core JAR so it must be built first -->
        <groupId>org.opentripplanner</groupId>
        <artifactId>otp-leaflet-client</artifactId>
        <version>${project.version}</version>
        <type>war</type> <!-- defaults to JAR, must specify if it's WAR -->
      </dependency>
        
        <!-- SPRING -->
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-aop</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-beans</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-context</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-core</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-web</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-jdbc</artifactId>
          <version>${spring.version}</version>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-orm</artifactId>
          <version>${spring.version}</version>
        </dependency>
        <dependency>
          <groupId>org.springframework.security</groupId>
          <artifactId>spring-security-core</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework.security</groupId>
          <artifactId>spring-security-config</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework.security</groupId>
          <artifactId>spring-security-web</artifactId>
        </dependency>
                
        <!-- LOGGING -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
        <dependency>
          <!-- Jersey uses java.util logging, redirect it via slf4j API to Logback -->
          <groupId>org.slf4j</groupId>
          <artifactId>jul-to-slf4j</artifactId>
        </dependency>
        <dependency>
          <!-- Spring uses jakarta commons logging, redirect it via slf4j API to Logback -->
          <groupId>org.slf4j</groupId>
          <artifactId>jcl-over-slf4j</artifactId>
        </dependency>

        <!-- JAVA STANDARD LIBRARY EXTENSIONS -->
        <dependency>
          <groupId>com.google.guava</groupId>
          <artifactId>guava</artifactId>
        </dependency>
        <dependency>
          <groupId>org.projectlombok</groupId>
          <artifactId>lombok</artifactId>
        </dependency>
        <dependency>
          <groupId>net.lingala.zip4j</groupId>
          <artifactId>zip4j</artifactId>
          <version>1.3.1</version>
        </dependency>

        <!-- GEOTOOLS AND JTS TOPOLOGY (geometry, rasters and projection) -->
        <dependency>
          <groupId>com.vividsolutions</groupId>
          <artifactId>jts</artifactId>
        </dependency>
        <dependency>
          <groupId>org.geotools</groupId>
          <artifactId>gt-geojson</artifactId>
        </dependency>
        <dependency>
          <groupId>org.geotools</groupId>
          <artifactId>gt-referencing</artifactId>
        </dependency>
        <dependency>
          <groupId>org.geotools</groupId>
          <artifactId>gt-coverage</artifactId>
        </dependency>
        <dependency>
          <groupId>org.geotools</groupId>
          <artifactId>gt-arcgrid</artifactId>
        </dependency>
        <dependency>
          <groupId>org.geotools</groupId>
          <artifactId>gt-shapefile</artifactId>
        </dependency>
        <dependency>
          <groupId>org.geotools</groupId>
          <artifactId>gt-geotiff</artifactId>
        </dependency>
        <dependency>
          <!-- provides EPSG database for projections (shapefile loading) -->
          <groupId>org.geotools</groupId>
          <artifactId>gt-epsg-hsql</artifactId>
        </dependency>
        
        <!-- TESTING -->
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
        </dependency>
        <dependency>
          <!-- what is this used for? -->
          <groupId>com.sun.jersey</groupId>
          <artifactId>jersey-client</artifactId>
          <scope>test</scope> 
        </dependency>
        <dependency>
          <groupId>org.mockito</groupId>
          <artifactId>mockito-all</artifactId>
          <version>1.9.0</version>
          <scope>test</scope>
        </dependency>

        <!-- JERSEY JAX-RS annontation-driven REST -->
        <dependency>
          <groupId>com.sun.jersey</groupId>
          <artifactId>jersey-core</artifactId>
        </dependency>
        <dependency>
          <groupId>com.sun.jersey.contribs</groupId>
          <artifactId>jersey-spring</artifactId> <!-- provides SpringComponentProviderFactory -->
        </dependency>
        <dependency>
          <groupId>com.sun.jersey</groupId>
          <artifactId>jersey-servlet</artifactId> <!-- provides SpringServlet -->
        </dependency>
        <dependency>
          <!-- Jersey-Grizzly integration. -->
          <!-- Grizzly is a NIO framework we use in the embedded (standalone) server. -->
          <!-- Jersey integrates with Grizzly 2.2.16 by default -->
          <!-- But seems to work properly with 2.3.5 via artifact excludes. -->
          <groupId>com.sun.jersey</groupId>
          <artifactId>jersey-grizzly2</artifactId>
        </dependency>
        
        <!-- Asynchronous Websockets-capable client, for message-driven incremental GTFS-RT -->
        <!-- AsyncHttpClient Websockets needs a newer version of Grizzly than Jersey does. -->
        <dependency>
          <groupId>com.ning</groupId>
          <artifactId>async-http-client</artifactId>
          <version>1.7.19</version>
        </dependency>

        <!-- OTHER DEPENDENCIES -->
        <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>servlet-api</artifactId>
          <version>2.5</version>
          <scope>provided</scope> <!-- this dependency is provided by the servlet container -->
        </dependency>
        <dependency>
          <groupId>javax.annotation</groupId>
          <artifactId>jsr250-api</artifactId>
          <version>1.0</version>
        </dependency>
        <dependency>
          <groupId>cglib</groupId>
          <artifactId>cglib</artifactId>
          <version>2.2.2</version>
        </dependency>
        <dependency>
          <groupId>javax.inject</groupId>
          <artifactId>javax.inject</artifactId>
          <version>1</version>
        </dependency>
        <dependency>
          <!-- Bytecode manipulator -->
          <groupId>javassist</groupId>
          <artifactId>javassist</artifactId>
          <version>3.8.0.GA</version>
        </dependency>
        <dependency>
          <!-- Java ZeroMQ -->
          <groupId>org.jeromq</groupId>
          <artifactId>jeromq</artifactId>
          <version>0.2.0</version>
        </dependency>
        <dependency>
          <!-- OBA GTFS loader -->
          <groupId>org.onebusaway</groupId>
          <artifactId>onebusaway-gtfs</artifactId>
        </dependency>
        <dependency>
          <!-- Processing is used for the debug GUI (though we could probably use just Java2D) -->
          <groupId>org.processing</groupId>
          <artifactId>core</artifactId>
          <version>1.0.7</version>
        </dependency>
        <dependency>
          <!-- Google Protocol Buffers -->
          <groupId>com.google.protobuf</groupId>
          <artifactId>protobuf-java</artifactId>
          <version>2.5.0</version>
          <type>jar</type>
          <scope>compile</scope>
        </dependency>
        <dependency>
          <groupId>commons-lang</groupId>
          <artifactId>commons-lang</artifactId>
          <version>2.6</version>
        </dependency>
        <dependency>
          <groupId>joda-time</groupId>
          <artifactId>joda-time</artifactId>
          <version>2.1</version>
        </dependency>

        <!-- JSON -->
		<dependency>
		  <!-- Provides a message body writer for application/json instead of just XML -->
		  <!-- https://github.com/FasterXML/jackson-jaxrs-providers -->
		  <groupId>com.fasterxml.jackson.jaxrs</groupId>
		  <artifactId>jackson-jaxrs-json-provider</artifactId>
		</dependency>
        <dependency>
            <groupId>net.sf.json-lib</groupId>
            <artifactId>json-lib</artifactId>
            <version>2.1</version>
            <classifier>jdk15</classifier>
        </dependency>
        <dependency> 
          <!-- more JSON -->
          <groupId>org.codehaus.jettison</groupId>
          <artifactId>jettison</artifactId>
          <version>1.1</version>
        </dependency>
        <dependency>
          <groupId>org.codehaus.jackson</groupId>
          <artifactId>jackson-core-asl</artifactId>
          <version>1.9.11</version>
        </dependency>
        <dependency>
          <groupId>org.codehaus.jackson</groupId>
          <artifactId>jackson-mapper-asl</artifactId>
          <version>1.9.11</version>
        </dependency>
        <dependency>
          <groupId>com.fasterxml.jackson.module</groupId>
          <artifactId>jackson-module-jaxb-annotations</artifactId>
          <version>2.0.5</version>
        </dependency>
	   <dependency>
         <!-- More JSON used by Nominatim geocoder module -->
	     <groupId>net.sf.flexjson</groupId>
	     <artifactId>flexjson</artifactId>
	     <version>2.0</version>
	     <type>jar</type>
	     <scope>compile</scope>
	   </dependency>        
        <dependency>
          <groupId>org.apache.axis</groupId>
          <artifactId>axis</artifactId>
          <version>1.4</version>
        </dependency>
        <dependency>
          <groupId>org.apache.axis</groupId>
          <artifactId>axis-jaxrpc</artifactId>
          <version>1.4</version>
        </dependency>
        <dependency>
          <groupId>commons-discovery</groupId>
          <artifactId>commons-discovery</artifactId>
          <version>0.4</version>
        </dependency>
        <dependency>
          <groupId>org.apache.commons</groupId>
          <artifactId>commons-compress</artifactId>
          <version>1.0</version>
        </dependency>
        <dependency>
          <groupId>net.java.dev.jets3t</groupId>
          <artifactId>jets3t</artifactId>
          <version>0.8.1</version>
        </dependency>
        <dependency>
          <!-- OpenStreetMap protobuf (PBF) definitions -->
          <groupId>crosby.binary</groupId>
          <artifactId>osmpbf</artifactId>
          <version>1.2.1</version>
        </dependency>
        <dependency>
          <!-- Command line parameter parsing -->
          <groupId>com.beust</groupId>
          <artifactId>jcommander</artifactId>
          <version>1.27</version>
        </dependency>
        <dependency>
          <!-- CSV parser -->
          <groupId>net.sourceforge.javacsv</groupId>
          <artifactId>javacsv</artifactId>
        </dependency>
        <dependency>
          <groupId>org.apache.httpcomponents</groupId>
          <artifactId>httpclient</artifactId>
          <version>4.1.2</version>
        </dependency>
        <dependency>
          <groupId>org.apache.commons</groupId>
          <artifactId>commons-math3</artifactId>
          <version>3.0</version>
        </dependency>

    </dependencies>
    
    <build>
      <resources>
        <resource>
          <!-- Filtering will perform substitution on maven-version.properties,
            see git commit id plugin below. -->
          <directory>src/main/resources</directory>
          <filtering>true</filtering>
        </resource>
      </resources>
      <plugins>
        <plugin>
          <!-- Generate REST API documentation from Jersey-annotated classes -->
          <groupId>org.codehaus.enunciate</groupId>
          <artifactId>maven-enunciate-plugin</artifactId>
          <executions>
            <execution>
              <phase>site</phase> <!-- default binding for docs goal is process-sources phase -->
              <goals><goal>docs</goal></goals>
            </execution>
          </executions>
          <configuration>
            <!-- change this to wherever you want the docs -->
            <docsDir>${project.build.directory}/site/enunciate</docsDir>
          </configuration>
        </plugin>
        <plugin>
          <!-- Get current Git commit information for use in MavenVersion class.
            Commit information is stored in Maven variables, which are then substituted
            into the properties file. The plugin has a mode to generate a git.properties file,
            but we need the Maven project version as well, so we perform substitution. -->
          <groupId>pl.project13.maven</groupId>
          <artifactId>git-commit-id-plugin</artifactId>
          <version>2.1.7</version>
          <executions>
            <execution>
              <goals>
                <goal>revision</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <verbose>true</verbose>
            <dotGitDirectory>${project.basedir}/../.git</dotGitDirectory>
          </configuration>
        </plugin>
        <plugin>
        <!-- Copy the client WAR into the right place for inclusion in the standalone 
          JAR, so it can be served up. We want to copy the compressed WAR file rather 
          than list it as a dependency and have the shade plugin explode it. Note that 
          the client WAR is listed as a dependency, because the fact that it is referenced 
          by the copy goal unfortunately does not force proper reactor ordering. -->
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>2.8</version>
          <executions>
            <execution>
              <id>copy-client-war</id>
              <!-- Bind to the phase just before package, which prepares the unpacked package. 
                This doesn't work from within the package phase itself. -->
              <phase>prepare-package</phase>
              <goals>
                <goal>copy</goal>
              </goals>
              <configuration>
                <artifactItems>
                  <artifactItem>
                    <groupId>${project.groupId}</groupId>
                    <artifactId>otp-leaflet-client</artifactId>
                    <version>${project.version}</version>
                    <type>war</type>
                    <!-- Per-artifact directory / filename setting (also possible globally). -->
                    <!-- Mix the WAR in with the JAR contents, in classes/ -->
                    <outputDirectory>${project.build.directory}/classes</outputDirectory>
                    <destFileName>client.war</destFileName>
                  </artifactItem>
                </artifactItems>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <!-- There used to be a dependency-plugin:copy-dependencies plugin entry 
          here, but the shade-plugin will explode the dependencies even if they aren't 
          manually copied in. -->
    
        <plugin>
        <!-- We want to create a standalone jar that can be run on the command 
          line. Java does not really allow this - you cannot place jars inside of jars. 
          You must either provide all the dependency jars to the user (usually lib/ 
          under the directory containing the runnable jar) or explode all the jars 
          and repackage them into a single jar. The problem is that while class files 
          are nicely organized into the package namespace and should not collide, the 
          META-INF directories of the jars will collide. Maven's standard assembly 
          plugin does not account for this and will just clobber metadata. This then 
          causes runtime errors, particularly with Spring. Instead, we use the shade 
          plugin which has transformers that will for example append files of the same 
          name rather than overwrite them in the combined JAR. NB: Don't use a version 
          of the shade plugin older than 1.3.2, as it fixed MSHADE-76 (files not merged 
          properly if some input files are missing a terminating newline) -->
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
          <executions>
            <execution>
              <phase>package</phase>
              <goals>
                <goal>shade</goal>
              </goals>
              <configuration>
                <finalName>otp</finalName>
                <!-- MinimizeJar removes unused classes, (classes not imported explicitly 
                  by name). Jersey auto-scans for REST resources in OTP, so use include filters 
                  to force-include classes that are dynamically loaded by name/auto-scanned. -->
                <!-- It is removing things like org/codehaus/jettison/json/JSONException 
                  even though they are explicitly imported in the source. <minimizeJar>true</minimizeJar> 
                  <filters> <filter> <artifact>com.sun.jersey:*</artifact> <includes> <include>**</include> 
                  </includes> </filter> <filter> <artifact>org.opentripplanner:*</artifact> 
                  <includes> <include>**</include> </includes> </filter> </filters> -->
                 <artifactSet>
                  <excludes>
                    <!-- Do not explode the client WAR. -->
                    <!-- Actually, shade seems to skip the WAR even without this exclusion (verify) -->
                    <exclude>org.opentripplanner:otp-leaflet-client</exclude> --&gt;
                  </excludes>
                </artifactSet>                
                <transformers>
                  <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                    <resource>META-INF/spring.handlers</resource>
                  </transformer>
                  <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                    <resource>META-INF/spring.schemas</resource>
                  </transformer>
                  <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
                  <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                    <manifestEntries>
                      <Main-Class>org.opentripplanner.standalone.OTPMain</Main-Class>
                      <!-- The ImageIO lines allow some image reader plugins to work (TODO elaborate) -->
                      <Specification-Title>Java Advanced Imaging Image I/O
                        Tools</Specification-Title>
                      <Specification-Version>1.1</Specification-Version>
                      <Specification-Vendor>Sun Microsystems, Inc.</Specification-Vendor>
                      <Implementation-Title>com.sun.media.imageio</Implementation-Title>
                      <Implementation-Version>1.1</Implementation-Version>
                      <Implementation-Vendor>Sun Microsystems, Inc.</Implementation-Vendor>
                      <Extension-Name>com.sun.media.imageio</Extension-Name>
                    </manifestEntries>
                  </transformer>
                </transformers>
              </configuration>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </build>
</project>
